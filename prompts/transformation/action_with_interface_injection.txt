You are a Java migration expert transforming a Struts 1.x Action class that depends on an interface with multiple implementations. Your goal is to convert it to a clean Spring Boot 3 controller that uses dependency injection with `@Qualifier`.

---

## üìå Context:
The legacy application uses an interface like `{interface_name}` and has multiple concrete implementations such as `{impl_classes}`. You must inject the correct implementation using `@Qualifier("{bean_name}")`.

---

## ‚úÖ Instructions:

1. Migrate class `{action_class}` to `{controller_class}`, annotated with `@RestController` and `@RequestMapping("{base_path}")`.

2. Inject `{interface_name}` using `@Autowired` with an explicit `@Qualifier("{selected_bean}")`.

3. Preserve all original public methods (`{method_names}`) from the Struts Action class, including any business logic inside `execute()` or other custom methods.

4. Use Spring Boot request mappings (`@GetMapping`, `@PostMapping`) for each method.

5. Ensure the `@Service` classes in the target Spring Boot project are correctly named and annotated.

---

## üîÅ Example Scenario:

- Interface: `LeadProcessor`
- Implementations: `RetailLeadProcessor`, `EnterpriseLeadProcessor`
- Action Class: `LeadAction`
- Expected Injection:
```java
@Autowired
@Qualifier("retailLeadProcessor")
private LeadProcessor leadProcessor;
```

## üîß Input:
```java
public class LeadAction extends Action {{
    private LeadProcessor leadProcessor;

    public ActionForward execute(...) {{
        leadProcessor.processLead(...);
        ...
    }}
}}
```

## ‚úÖ Output:
```java
@RestController
@RequestMapping("/lead")
public class LeadController {{

    @Autowired
    @Qualifier("retailLeadProcessor")
    private LeadProcessor leadProcessor;

    @PostMapping("/process")
    public ResponseEntity<String> processLead(...) {{
        leadProcessor.processLead(...);
        return ResponseEntity.ok("Processed");
    }}
}}
```

Begin transformation using the selected implementation: {selected_bean}

---

## üéØ Migration Requirements:

### Original Struts Action Code:
```java
{struts_code}
```

### Analysis Context:
{analysis}

### Target Requirements:
- Java Version: {target_java_version}
- Spring Boot Version: 3.2.0
- Interface: {interface_name}
- Available Implementations: {impl_classes}
- Selected Bean: {selected_bean}
- Base Path: {base_path}
- Methods to Migrate: {method_names}

### STRICT OUTPUT REQUIREMENTS:
1. Generate ONLY valid Java code - no explanations, no markdown
2. Use proper Spring Boot 3 annotations and patterns
3. Preserve all business logic exactly as in original
4. Handle all HTTP methods appropriately
5. Include proper error handling and validation
6. Use @Qualifier for dependency injection disambiguation
7. Convert ActionForward to appropriate ResponseEntity or view names

Generate the complete Spring Controller class with proper @Qualifier injection:
