You are transforming a JSP file into a modern Thymeleaf HTML template.

## Goal:
Convert legacy JSP with Struts tags, JSTL, and scriptlets into a clean, modern Thymeleaf template while preserving all UI elements, forms, data display, and user interactions.

---

## Rules:
1. **PRESERVE ALL UI ELEMENTS**: Every form field, button, table, list, and display element must be retained
2. **MAINTAIN FUNCTIONALITY**: All conditional displays, loops, and dynamic content must work identically
3. **CONVERT TAG LIBRARIES**: Transform JSTL and Struts tags to Thymeleaf equivalents
4. **ELIMINATE SCRIPTLETS**: Convert all `<% ... %>` code to Thymeleaf expressions or controller logic
5. **PRESERVE STYLING**: Keep all CSS classes, IDs, and styling attributes
6. **MAINTAIN FORM STRUCTURE**: All form fields, validation, and submission logic must be preserved
7. **CONVERT DATA BINDING**: Transform JSP EL expressions to Thymeleaf syntax

---

## Analysis Context:
{analysis}

## Original JSP Code:
```jsp
{jsp_code}
```

## Target Configuration:
- Template Engine: Thymeleaf 3.x
- Spring Boot Version: {spring_boot_version}
- Data Model: {model_objects}

---

## Transformation Patterns:

### Tag Library Conversions:

#### Struts HTML Tags:
```jsp
<!-- FROM: Struts form tags -->
<html:form action="/submitLead" method="post">
<!-- TO: Thymeleaf form -->
<form th:action="@{{/lead/submit}}" method="post">

<!-- FROM: Struts input fields -->
<html:text property="name" size="30" maxlength="50"/>
<!-- TO: Thymeleaf input fields -->
<input type="text" th:field="*{{name}}" size="30" maxlength="50"/>

<!-- FROM: Struts select -->
<html:select property="category">
    <html:option value="A">Category A</html:option>
</html:select>
<!-- TO: Thymeleaf select -->
<select th:field="*{{category}}">
    <option value="A">Category A</option>
</select>

<!-- FROM: Struts submit -->
<html:submit value="Submit"/>
<!-- TO: HTML submit -->
<button type="submit">Submit</button>

<!-- FROM: Struts errors -->
<html:errors property="name"/>
<!-- TO: Thymeleaf validation -->
<div th:if="${{#fields.hasErrors('name')}}" th:errors="*{{name}}" class="error"></div>
```

#### Struts Logic Tags:
```jsp
<!-- FROM: Logic iterate -->
<logic:iterate id="item" name="items">
    <bean:write name="item" property="name"/>
</logic:iterate>
<!-- TO: Thymeleaf each -->
<div th:each="item : ${{items}}">
    <span th:text="${{item.name}}"></span>
</div>

<!-- FROM: Logic present/notPresent -->
<logic:present name="user">
    Welcome <bean:write name="user" property="name"/>
</logic:present>
<!-- TO: Thymeleaf if -->
<div th:if="${{user != null}}">
    Welcome <span th:text="${{user.name}}"></span>
</div>

<!-- FROM: Logic equal -->
<logic:equal name="status" value="active">
    Status is active
</logic:equal>
<!-- TO: Thymeleaf conditional -->
<div th:if="${{status == 'active'}}">
    Status is active
</div>
```

#### JSTL Tags:
```jsp
<!-- FROM: JSTL forEach -->
<c:forEach var="item" items="${{items}}">
    ${{item.name}}
</c:forEach>
<!-- TO: Thymeleaf each -->
<div th:each="item : ${{items}}">
    <span th:text="${{item.name}}"></span>
</div>

<!-- FROM: JSTL if -->
<c:if test="${{condition}}">
    Content here
</c:if>
<!-- TO: Thymeleaf if -->
<div th:if="${{condition}}">
    Content here
</div>

<!-- FROM: JSTL choose/when -->
<c:choose>
    <c:when test="${{status == 'new'}}">New</c:when>
    <c:otherwise>Existing</c:otherwise>
</c:choose>
<!-- TO: Thymeleaf switch -->
<div th:switch="${{status}}">
    <span th:case="'new'">New</span>
    <span th:case="*">Existing</span>
</div>
```

### Expression Language Conversion:
```jsp
<!-- FROM: JSP EL -->
${{user.name}}
${{sessionScope.user.email}}
${{requestScope.message}}
<!-- TO: Thymeleaf expressions -->
${{user.name}}
${{session.user.email}}
${{message}}

<!-- FROM: Bean write -->
<bean:write name="user" property="fullName"/>
<!-- TO: Thymeleaf text -->
<span th:text="${{user.fullName}}"></span>
```

### Form Data Binding:
```jsp
<!-- FROM: Struts form with ActionForm -->
<html:form action="/updateUser" method="post">
    <html:hidden property="id"/>
    <html:text property="firstName"/>
    <html:text property="lastName"/>
    <html:submit value="Update"/>
</html:form>
<!-- TO: Thymeleaf form with model binding -->
<form th:action="@{{/user/update}}" th:object="${{userForm}}" method="post">
    <input type="hidden" th:field="*{{id}}"/>
    <input type="text" th:field="*{{firstName}}"/>
    <input type="text" th:field="*{{lastName}}"/>
    <button type="submit">Update</button>
</form>
```

---

## Critical Requirements:
1. **PRESERVE ALL UI ELEMENTS**: Every form field, button, link, table, and display must be retained
2. **MAINTAIN FORM FUNCTIONALITY**: All form submissions, validations, and data binding must work
3. **CONVERT ALL SCRIPTLETS**: No `<% ... %>` code should remain
4. **PRESERVE STYLING**: All CSS classes, IDs, and styles must be maintained
5. **MAINTAIN DATA FLOW**: All dynamic content and data display must be preserved
6. **CONVERT TAG LIBRARIES**: All Struts and JSTL tags must be converted to Thymeleaf
7. **PRESERVE NAVIGATION**: All links and form actions must be converted to Thymeleaf URLs

## Advanced Scenarios:
- **JavaScript Integration**: Use `th:inline="javascript"` for dynamic JavaScript
- **Fragment Usage**: Extract reusable parts into Thymeleaf fragments
- **Internationalization**: Convert resource bundle references to Thymeleaf i18n
- **Security Integration**: Add CSRF protection and security expressions where needed

**IMPORTANT**: 
- The template should be a complete functional replacement for the original JSP
- All user interactions must work identically to the original
- Form validation and error display must be preserved
- The template should integrate seamlessly with Spring Boot controllers

## Original JSP:
```jsp
{jsp_code}
```

## Analysis Results:
```json
{analysis}
```

## Migration Requirements:

### 1. Template Structure
- Convert HTML structure to valid Thymeleaf template
- Use proper DOCTYPE and HTML5 standards
- Include Thymeleaf namespace: `<html xmlns:th="http://www.thymeleaf.org">`

### 2. Struts Tag Conversion
- Convert html:form tags to standard form with th:action and th:object
- Transform html:text to input with th:field
- Replace html:submit with standard submit buttons
- Convert logic:iterate to th:each loops
- Transform bean:write to th:text expressions

### 3. Form Handling
- Use th:object for form backing objects
- Implement th:field for form inputs with proper binding
- Add validation error display with th:errors
- Handle form submission with proper action URLs

### 4. Conditional Logic
- Convert logic:present to th:if conditionals
- Transform logic:notPresent to th:unless conditionals

### 5. Internationalization
- Replace string literals with message property references
- Use message properties for all user-facing text
- Implement proper locale handling

### 6. Static Resources
- Update CSS/JS paths to Spring Boot conventions
- Use proper static resource references

### 7. Security Integration
- Add CSRF tokens for forms where needed
- Implement Spring Security integration where appropriate

## Output Requirements:
1. Complete valid Thymeleaf HTML template
2. Proper Thymeleaf syntax and expressions
3. Modern HTML5 structure
4. Spring Boot compatible resource paths
5. Maintain original functionality and layout
- Use `th:switch` and `th:case` for complex conditionals

### 5. Internationalization
- Replace string literals with `th:text="#{{message.key}}"`
- Use message properties for all user-facing text
- Implement proper locale handling

### 6. Static Resources
- Update CSS/JS paths to Spring Boot conventions: `/static/css/`, `/static/js/`
- Use `th:href="@{{/css/style.css}}"` for CSS links
- Use `th:src="@{{/js/script.js}}"` for JavaScript includes

### 7. Security Integration
- Add CSRF tokens for forms: `<input type="hidden" th:name="${{_csrf.parameterName}}" th:value="${{_csrf.token}}"/>`
- Implement Spring Security integration where needed

## Output Requirements:
1. Complete valid Thymeleaf HTML template
2. All Struts tags converted to Thymeleaf equivalents
3. Proper Spring Boot static resource paths
4. Internationalization support
5. Form validation error handling
6. CSRF protection for forms

Generate ONLY the complete Thymeleaf HTML template without any explanatory text or code blocks.
