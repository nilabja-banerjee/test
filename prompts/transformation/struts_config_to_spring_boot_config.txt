You are converting a struts-config.xml file into a Java-based Spring Boot routing and bean configuration.

## Goal:
Transform legacy Struts XML configuration into modern Spring Boot Java configuration, converting action mappings, form beans, forwards, and global settings into equivalent Spring Boot patterns.

---

## Instructions:
1. **PRESERVE ALL MAPPINGS**: Every action mapping must have a corresponding Spring Boot endpoint
2. **CONVERT FORM BEANS**: Transform form-bean declarations into DTO/Model classes
3. **CONVERT FORWARDS**: Transform forward entries into RESTful return types or redirect URLs
4. **CONVERT GLOBAL FORWARDS**: Create centralized error/controller handlers for global forwards
5. **PRESERVE SECURITY**: Convert any security constraints or action guards into Spring Security annotations
6. **MAINTAIN NAVIGATION**: All navigation flows must be preserved in the Spring Boot application

---

## Analysis Context:
{analysis}

## Original Struts Config:
```xml
{struts_config}
```

## Target Configuration:
- Spring Boot Version: {spring_boot_version}
- Security Framework: {security_framework}
- Template Engine: {template_engine}

---

## Transformation Patterns:

### Action Mappings Conversion:
```xml
<!-- FROM: Struts action mapping -->
<action path="/createLead" 
        type="com.app.CreateLeadAction" 
        name="leadForm" 
        scope="request" 
        validate="true">
    <forward name="success" path="/leadListing.jsp"/>
    <forward name="error" path="/leadForm.jsp"/>
</action>

<!-- TO: Spring Boot Controller (Java Configuration) -->
@RestController
@RequestMapping("/lead")
public class CreateLeadController {

    @PostMapping("/create")
    public String createLead(@Valid @RequestBody LeadDTO leadForm, 
                           BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "leadForm"; // Forward to error page
        }
        // Business logic here
        return "redirect:/lead/listing"; // Forward to success page
    }
}
```

### Form Bean Conversion:
```xml
<!-- FROM: Struts form-bean -->
<form-bean name="leadForm" type="com.app.forms.LeadForm"/>

<!-- TO: Spring Boot DTO -->
@Data
public class LeadDTO {
    @NotBlank(message = "Name is required")
    private String name;
    
    @Email(message = "Valid email is required")
    private String email;
    
    // All fields from original LeadForm
}
```

### Global Forwards Conversion:
```xml
<!-- FROM: Struts global-forwards -->
<global-forwards>
    <forward name="login" path="/login.jsp"/>
    <forward name="error" path="/error.jsp"/>
    <forward name="home" path="/home.jsp"/>
</global-forwards>

<!-- TO: Spring Boot Global Controller -->
@ControllerAdvice
public class GlobalNavigationController {
    
    @RequestMapping("/login")
    public String login() {
        return "login";
    }
    
    @RequestMapping("/error")
    public String error() {
        return "error";
    }
    
    @RequestMapping("/home")
    public String home() {
        return "home";
    }
}
```

### Exception Handling Conversion:
```xml
<!-- FROM: Struts exception handling -->
<global-exceptions>
    <exception key="error.database" 
               type="java.sql.SQLException" 
               path="/error.jsp"/>
</global-exceptions>

<!-- TO: Spring Boot Exception Handler -->
@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(SQLException.class)
    public ModelAndView handleDatabaseError(SQLException ex) {
        ModelAndView mav = new ModelAndView("error");
        mav.addObject("errorMessage", "Database error occurred");
        return mav;
    }
}
```

### Message Resources Conversion:
```xml
<!-- FROM: Struts message-resources -->
<message-resources parameter="ApplicationResources"/>

<!-- TO: Spring Boot Configuration -->
@Configuration
public class MessageConfig {
    
    @Bean
    public MessageSource messageSource() {
        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
        messageSource.setBasename("ApplicationResources");
        messageSource.setDefaultEncoding("UTF-8");
        return messageSource;
    }
}
```

---

## Example Complete Transformation:

**Input Struts Config:**
```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts-config PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 1.3//EN"
    "http://struts.apache.org/dtds/struts-config_1_3.dtd">

<struts-config>
    <form-beans>
        <form-bean name="leadForm" type="com.example.forms.LeadForm"/>
        <form-bean name="userForm" type="com.example.forms.UserForm"/>
    </form-beans>

    <global-forwards>
        <forward name="login" path="/login.jsp"/>
        <forward name="home" path="/home.jsp"/>
        <forward name="error" path="/error.jsp"/>
    </global-forwards>

    <action-mappings>
        <action path="/lead/create"
                type="com.example.actions.CreateLeadAction"
                name="leadForm"
                scope="request"
                validate="true">
            <forward name="success" path="/lead/listing.jsp"/>
            <forward name="error" path="/lead/form.jsp"/>
        </action>

        <action path="/lead/list"
                type="com.example.actions.ListLeadsAction">
            <forward name="success" path="/lead/listing.jsp"/>
        </action>

        <action path="/user/login"
                type="com.example.actions.LoginAction"
                name="userForm"
                scope="session">
            <forward name="success" path="/home.jsp"/>
            <forward name="failure" path="/login.jsp"/>
        </action>
    </action-mappings>

    <global-exceptions>
        <exception key="error.database"
                   type="java.sql.SQLException"
                   path="/error.jsp"/>
        <exception key="error.security"
                   type="java.lang.SecurityException"
                   path="/login.jsp"/>
    </global-exceptions>

    <message-resources parameter="ApplicationResources"/>
</struts-config>
```

**Expected Spring Boot Configuration:**

**1. Controller Classes:**
```java
@RestController
@RequestMapping("/lead")
public class LeadController {

    @Autowired
    private LeadService leadService;

    @PostMapping("/create")
    public String createLead(@Valid @RequestBody LeadDTO leadForm, 
                           BindingResult result, Model model) {
        if (result.hasErrors()) {
            return "lead/form"; // Error forward
        }
        
        leadService.createLead(leadForm);
        return "redirect:/lead/listing"; // Success forward
    }

    @GetMapping("/list")
    public String listLeads(Model model) {
        model.addAttribute("leads", leadService.getAllLeads());
        return "lead/listing"; // Success forward
    }
}

@Controller
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/login")
    public String login(@Valid @ModelAttribute UserDTO userForm, 
                       BindingResult result, HttpSession session) {
        if (result.hasErrors()) {
            return "login"; // Failure forward
        }
        
        User user = userService.authenticate(userForm);
        if (user != null) {
            session.setAttribute("user", user);
            return "redirect:/home"; // Success forward
        }
        
        return "login"; // Failure forward
    }
}
```

**2. Global Configuration:**
```java
@ControllerAdvice
public class GlobalNavigationController {
    
    @RequestMapping("/login")
    public String login() {
        return "login";
    }
    
    @RequestMapping("/home")
    public String home() {
        return "home";
    }
    
    @RequestMapping("/error")
    public String error() {
        return "error";
    }
}

@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(SQLException.class)
    public ModelAndView handleDatabaseError(SQLException ex) {
        ModelAndView mav = new ModelAndView("error");
        mav.addObject("errorKey", "error.database");
        return mav;
    }
    
    @ExceptionHandler(SecurityException.class)
    public ModelAndView handleSecurityError(SecurityException ex) {
        ModelAndView mav = new ModelAndView("login");
        mav.addObject("errorKey", "error.security");
        return mav;
    }
}

@Configuration
public class MessageConfig {
    
    @Bean
    public MessageSource messageSource() {
        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
        messageSource.setBasename("ApplicationResources");
        messageSource.setDefaultEncoding("UTF-8");
        return messageSource;
    }
    
    @Bean
    public LocaleResolver localeResolver() {
        SessionLocaleResolver localeResolver = new SessionLocaleResolver();
        localeResolver.setDefaultLocale(Locale.ENGLISH);
        return localeResolver;
    }
}
```

**3. DTO Classes:**
```java
@Data
public class LeadDTO {
    @NotBlank(message = "Name is required")
    private String name;
    
    @Email(message = "Valid email is required")
    private String email;
    
    private String company;
    
    // All fields from original LeadForm
}

@Data
public class UserDTO {
    @NotBlank(message = "Username is required")
    private String username;
    
    @NotBlank(message = "Password is required")
    private String password;
    
    // All fields from original UserForm
}
```

---

## Critical Requirements:
1. **PRESERVE ALL ACTIONS**: Every action mapping must have a corresponding Spring Boot controller method
2. **MAINTAIN NAVIGATION FLOWS**: All forwards must be converted to appropriate returns or redirects
3. **CONVERT ALL FORMS**: Every form-bean must become a DTO with proper validation
4. **PRESERVE EXCEPTION HANDLING**: All exception mappings must be converted to @ExceptionHandler methods
5. **MAINTAIN GLOBAL BEHAVIOR**: Global forwards and exceptions must be preserved in @ControllerAdvice
6. **CONVERT MESSAGE RESOURCES**: Message bundles must be configured in Spring Boot
7. **PRESERVE VALIDATION**: All validation rules must be maintained through Bean Validation

## Advanced Configuration:
- **Security Integration**: Convert any security constraints to Spring Security configuration
- **Interceptors**: Convert Struts plugins/interceptors to Spring interceptors
- **Custom RequestProcessors**: Convert to Spring Boot auto-configuration or custom filters

**IMPORTANT**: 
- Generate complete working Spring Boot configuration
- All navigation flows must be preserved
- Form validation and error handling must work identically
- The configuration should be production-ready and follow Spring Boot best practices
