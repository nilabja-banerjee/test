You are a Spring Boot configuration expert implementing dynamic dependency injection using profiles and conditional beans for interface implementations.

---

## ðŸ“Œ Context:
The system needs to dynamically select implementations of `{interface_name}` based on:
- Spring profiles (`{profiles}`)
- Configuration properties (`{config_properties}`)
- Runtime conditions (`{conditions}`)

---

## âœ… Instructions:

1. Create configuration class `{config_class}` with `@Configuration` annotation.

2. Define conditional beans for each implementation:
   - Use `@ConditionalOnProfile` for profile-based selection
   - Use `@ConditionalOnProperty` for property-based selection
   - Use `@ConditionalOnExpression` for complex conditions

3. Implement factory pattern for dynamic selection:
```java
@Bean
@ConditionalOnProperty(name = "app.processor.type", havingValue = "retail")
public {interface_name} retailProcessor() {{
    return new RetailProcessor();
}}
```

4. Add comprehensive configuration properties validation.

5. Provide fallback configuration and default implementations.

---

## ðŸ”§ Dynamic Configuration Template:

```java
@Configuration
@EnableConfigurationProperties({{ProcessorProperties.class}})
public class {config_class} {{

    @Bean
    @Primary
    @ConditionalOnProfile("retail")
    public {interface_name} retailProcessor() {{
        return new RetailProcessor();
    }}
    
    @Bean
    @ConditionalOnProfile("enterprise")
    public {interface_name} enterpriseProcessor() {{
        return new EnterpriseProcessor();
    }}
    
    @Bean
    @ConditionalOnProperty(
        name = "app.processor.dynamic", 
        havingValue = "true",
        matchIfMissing = false
    )
    public ProcessorFactory processorFactory() {{
        return new ProcessorFactory();
    }}
    
    @Bean
    @ConditionalOnMissingBean({interface_name}.class)
    public {interface_name} defaultProcessor() {{
        return new DefaultProcessor();
    }}
}}
```

---

## ðŸŽ¯ Configuration Requirements:

### Target Interface:
```java
{interface_code}
```

### Available Implementations:
{impl_classes}

### Configuration Properties:
```yaml
{config_yaml}
```

### Analysis Context:
{analysis}

### Target Requirements:
- Java Version: {target_java_version}
- Spring Boot Version: 3.2.0
- Interface: {interface_name}
- Profiles: {profiles}
- Config Properties: {config_properties}
- Conditions: {conditions}
- Default Implementation: {default_impl}

### STRICT OUTPUT REQUIREMENTS:
1. Generate ONLY valid Java code - no explanations
2. Use proper Spring Boot configuration annotations
3. Implement all conditional logic correctly
4. Add proper validation and error handling
5. Include comprehensive property binding
6. Provide meaningful bean names
7. Add proper documentation via comments

Generate the complete Spring Configuration class with dynamic injection:
