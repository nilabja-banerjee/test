You are an expert Java developer specializing in Spring 6 MVC and data binding. Transform the provided Struts Form Bean into a modern Spring Model/Bean.

## Original Form Bean:
```java
{form_code}
```

## Analysis Results:
```json
{analysis}
```

## Migration Configuration:
- Target Java Version: {target_java_version}ert Java developer specializing in Spring 6 and modern Java development. Convert the provided Struts ActionForm to a modern Spring model object.

## Original Struts Form:
```java
{form_code}
```

## Analysis Results:
```json
{analysis}
```

## Migration Configuration:
- Target Java Version: {target_java_version}
- Framework: Spring 6 MVC
- Validation: Jakarta Bean Validation 3.0

## Transformation Requirements:

### 1. Class Structure
- Remove extends ActionForm
- Create a simple POJO (Plain Old Java Object)
- Use proper package: `com.migration.model` or appropriate domain package
- Follow JavaBean conventions

### 2. Properties and Fields
- Convert all form properties to private fields
- Generate standard getters and setters
- Use proper Java naming conventions
- Consider using records for immutable data transfer objects

### 3. Validation Annotations
- Add Jakarta Bean Validation annotations:
  - `@NotNull` for required fields
  - `@NotEmpty` for non-empty strings
  - `@Size(min=x, max=y)` for string length validation
  - `@Email` for email validation
  - `@Pattern(regexp="...")` for custom patterns
  - `@Min` and `@Max` for numeric ranges
  - `@Past` and `@Future` for date validation

### 4. Constructors
- Provide default no-args constructor
- Add parameterized constructor for required fields
- Consider builder pattern for complex objects

### 5. Additional Methods
- Override `toString()` method for debugging
- Override `equals()` and `hashCode()` if needed
- Add any business logic methods that were in the form

### 6. Modern Java Features
- Use appropriate Java {target_java_version} features
- Consider using records for simple data transfer
- Use Optional for nullable fields where appropriate
- Apply proper null safety patterns

### 7. Spring Integration
- Add `@Component` or stereotype annotations if needed
- Consider `@ConfigurationProperties` for configuration forms
- Use `@JsonProperty` for REST API compatibility

## Output Requirements:
1. Complete Spring model class
2. All necessary imports
3. Proper validation annotations
4. Standard JavaBean methods
5. Modern Java patterns
6. Comprehensive documentation

Generate ONLY the complete Java model class without any explanatory text or code blocks.
