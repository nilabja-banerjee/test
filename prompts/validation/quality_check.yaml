# Code Quality Validation Prompts
metadata:
  name: "Code Quality Validation"
  description: "Validate migrated code quality and Spring Boot compliance"
  version: "1.0"
  author: "Migration System"
  last_updated: "2025-08-02"
  success_criteria:
    - "Spring Boot best practices followed"
    - "Clean code principles applied"
    - "Proper error handling"
    - "Business logic preservation verified"

templates:
  comprehensive_quality_check:
    name: "Comprehensive Quality Validation"
    description: "Full quality assessment of migrated code"
    template: |
      You are a senior Java architect performing a comprehensive code quality review.

      TASK: Validate the quality of this migrated Spring Boot code and provide improvement recommendations.

      VALIDATION CONTEXT:
      - Migration Type: {migration_type}
      - Original Framework: Struts 1
      - Target Framework: Spring Boot 3
      - Business Domain: {business_domain}
      - Complexity Level: {complexity}

      ORIGINAL STRUTS CODE:
      ```java
      {original_code}
      ```

      MIGRATED SPRING CODE:
      ```java
      {migrated_code}
      ```

      VALIDATION CRITERIA:

      1. **Functional Equivalence** (Weight: 30%)
         - Does the Spring code preserve ALL original Struts functionality?
         - Are all business rules maintained?
         - Is data flow equivalent?

      2. **Spring Boot Best Practices** (Weight: 25%)
         - Proper use of Spring annotations (@Controller, @Service, @Repository)
         - Constructor-based dependency injection
         - Appropriate use of @RequestMapping patterns
         - Proper transaction management

      3. **Code Quality** (Weight: 20%)
         - Clean, readable code structure
         - Proper naming conventions
         - Appropriate method sizes and responsibilities
         - Adequate documentation

      4. **Error Handling** (Weight: 15%)
         - Proper exception handling
         - Appropriate use of Spring exception hierarchy
         - Graceful error responses

      5. **Modern Java Usage** (Weight: 10%)
         - Use of Java 21 features where appropriate
         - Modern collection usage
         - Proper use of Optional, streams, etc.

      VALIDATION OUTPUT FORMAT:
      ```json
      {
        "overall_score": 0.0-1.0,
        "functional_equivalence": {
          "score": 0.0-1.0,
          "preserved_features": ["list of preserved features"],
          "missing_features": ["list of missing features"],
          "issues": ["list of functional issues"]
        },
        "spring_compliance": {
          "score": 0.0-1.0,
          "correct_patterns": ["list of correct Spring patterns"],
          "missing_patterns": ["list of missing patterns"],
          "anti_patterns": ["list of anti-patterns found"]
        },
        "code_quality": {
          "score": 0.0-1.0,
          "strengths": ["list of code quality strengths"],
          "improvements": ["list of improvement suggestions"]
        },
        "recommendations": [
          {
            "category": "functionality|spring|quality|error_handling|modern_java",
            "priority": "high|medium|low",
            "description": "specific recommendation",
            "code_example": "example code if applicable"
          }
        ],
        "migration_success": true/false,
        "ready_for_production": true/false
      }
      ```

      Perform the validation and provide detailed feedback:

    parameters:
      - migration_type
      - business_domain
      - complexity
      - original_code
      - migrated_code

  spring_compliance_check:
    name: "Spring Compliance Check"
    description: "Focused validation of Spring Boot compliance"
    template: |
      Validate Spring Boot 3 compliance of this migrated code.

      SPRING BOOT 3 REQUIREMENTS:
      - Uses jakarta.* packages (not javax.*)
      - Proper Spring annotations
      - Constructor-based dependency injection
      - Modern Spring patterns

      MIGRATED CODE:
      {migrated_code}

      COMPLIANCE CHECKLIST:
      ☐ @Controller/@RestController for web layer
      ☐ @Service for business layer
      ☐ @Repository for data layer
      ☐ @RequestMapping/@GetMapping/@PostMapping for endpoints
      ☐ Constructor-based @Autowired injection
      ☐ Proper exception handling
      ☐ Spring Boot 3 compatible imports

      Provide compliance assessment:

    parameters:
      - migrated_code

  business_logic_verification:
    name: "Business Logic Verification"
    description: "Verify business logic preservation"
    template: |
      Verify that all business logic has been preserved in the migration.

      ORIGINAL BUSINESS LOGIC:
      {original_code}

      MIGRATED IMPLEMENTATION:
      {migrated_code}

      VERIFICATION POINTS:
      - All business rules preserved
      - Data validation maintained
      - Error conditions handled
      - Side effects replicated
      - Performance characteristics maintained

      Provide business logic verification report:

    parameters:
      - original_code
      - migrated_code

validation:
  scoring_rubric:
    excellent: 0.9-1.0
    good: 0.7-0.89
    acceptable: 0.6-0.69
    needs_improvement: 0.4-0.59
    poor: 0.0-0.39
  
  critical_issues:
    - "Missing business logic"
    - "Incorrect Spring patterns"
    - "Security vulnerabilities"
    - "Performance degradation"

examples:
  input:
    migration_type: "action_to_controller"
    business_domain: "user_management"
    complexity: "medium"
    original_code: |
      public class UserAction extends Action {
          public ActionForward execute(ActionMapping mapping, ActionForm form,
                                     HttpServletRequest request, HttpServletResponse response) {
              UserForm userForm = (UserForm) form;
              if (userForm.getUsername() == null) {
                  return mapping.findForward("error");
              }
              request.setAttribute("user", userForm);
              return mapping.findForward("success");
          }
      }
    migrated_code: |
      @Controller
      public class UserController {
          @RequestMapping("/user")
          public String handleUser(@Valid UserForm userForm, BindingResult result, Model model) {
              if (result.hasErrors()) {
                  return "error";
              }
              model.addAttribute("user", userForm);
              return "success";
          }
      }

  expected_output: |
    {
      "overall_score": 0.85,
      "functional_equivalence": {
        "score": 0.9,
        "preserved_features": ["form validation", "error handling", "success flow"],
        "missing_features": [],
        "issues": []
      },
      "spring_compliance": {
        "score": 0.8,
        "correct_patterns": ["@Controller", "@RequestMapping", "@Valid", "Model usage"],
        "missing_patterns": ["constructor injection"],
        "anti_patterns": []
      },
      "recommendations": [
        {
          "category": "spring",
          "priority": "medium",
          "description": "Add constructor-based dependency injection if services are needed"
        }
      ],
      "migration_success": true,
      "ready_for_production": true
    }
