# Compilation Error Resolution Prompts
metadata:
  name: "Compilation Error Resolution"
  description: "Fix Java compilation errors in migrated Spring Boot code"
  version: "1.0"
  author: "Migration System"
  last_updated: "2025-08-02"
  success_criteria:
    - "Code compiles successfully"
    - "All imports resolved"
    - "Syntax errors fixed"
    - "Business logic preserved"

templates:
  comprehensive_error_fix:
    name: "Comprehensive Error Resolution"
    description: "Detailed analysis and fixing of compilation errors"
    template: |
      You are an expert Java developer fixing compilation errors in migrated Spring Boot code.

      TASK: Analyze and fix the following compilation errors while preserving all business logic.

      ERROR ANALYSIS:
      Error Type: {error_type}
      Error Message: {error_message}
      File: {error_file}
      Line: {error_line}

      COMPILATION ERRORS:
      {error_details}

      PROBLEMATIC CODE:
      ```java
      {problematic_code}
      ```

      ORIGINAL STRUTS CODE (for reference):
      ```java
      {original_struts_code}
      ```

      FIXING REQUIREMENTS:
      1. **Preserve Business Logic**: Maintain ALL original functionality
      2. **Fix Syntax Errors**: Resolve all compilation issues
      3. **Correct Imports**: Add missing or fix incorrect imports
      4. **Spring Compliance**: Ensure Spring Boot 3 compatibility
      5. **Clean Code**: Apply proper Java coding standards

      COMMON FIXES TO APPLY:
      - Remove markdown artifacts (```, backticks)
      - Fix missing or incorrect imports
      - Correct annotation syntax
      - Fix method signatures and return types
      - Resolve package declaration issues
      - Fix unbalanced braces or parentheses

      ERROR-SPECIFIC GUIDELINES:
      {%- if "illegal character" in error_message.lower() %}
      - Remove all markdown formatting (```, backticks)
      - Clean up any non-Java characters
      {%- endif %}
      {%- if "cannot find symbol" in error_message.lower() %}
      - Add missing imports
      - Check class and method names
      - Verify package declarations
      {%- endif %}
      {%- if "class, interface, enum expected" in error_message.lower() %}
      - Fix class declaration syntax
      - Remove any explanatory text outside code
      - Ensure proper Java structure
      {%- endif %}

      OUTPUT REQUIREMENTS:
      - Start with package declaration
      - Include all necessary imports
      - Complete, error-free Java class
      - NO markdown code blocks
      - NO explanatory text
      - Pure, compilable Java code only

      Generate the fixed Java class:

    parameters:
      - error_type
      - error_message
      - error_file
      - error_line
      - error_details
      - problematic_code
      - original_struts_code

  quick_syntax_fix:
    name: "Quick Syntax Fix"
    description: "Fast resolution of common syntax errors"
    template: |
      Fix the compilation errors in this Java code.

      ERRORS:
      {error_summary}

      CODE WITH ERRORS:
      {problematic_code}

      REQUIREMENTS:
      - Fix all syntax errors
      - Maintain business logic
      - Ensure Spring Boot compatibility
      - Remove any markdown artifacts

      Generate the corrected Java code:

    parameters:
      - error_summary
      - problematic_code

  import_resolution:
    name: "Import Resolution Fix"
    description: "Specialized fixing for import-related errors"
    template: |
      Resolve import and dependency issues in this Spring Boot code.

      IMPORT ERRORS:
      {import_errors}

      CODE:
      {code_with_import_issues}

      SPRING BOOT 3 IMPORTS TO USE:
      - jakarta.* instead of javax.*
      - Spring Boot 3 compatible annotations
      - Latest Spring Framework imports

      COMMON SPRING IMPORTS:
      - org.springframework.stereotype.Controller
      - org.springframework.web.bind.annotation.*
      - org.springframework.beans.factory.annotation.Autowired
      - jakarta.validation.constraints.*

      Fix all import issues and generate corrected code:

    parameters:
      - import_errors
      - code_with_import_issues

  annotation_fix:
    name: "Annotation Error Fix"
    description: "Fix Spring annotation-related compilation errors"
    template: |
      Fix Spring annotation errors in this migrated code.

      ANNOTATION ERRORS:
      {annotation_errors}

      CODE:
      {code_with_annotation_issues}

      SPRING BOOT 3 ANNOTATION GUIDELINES:
      - Use @RestController for REST APIs
      - Use @Controller for MVC controllers
      - Use @Service for service layer
      - Use @Repository for data access
      - Use @RequestMapping, @GetMapping, @PostMapping for endpoints
      - Use @Autowired for dependency injection

      Generate the code with corrected annotations:

    parameters:
      - annotation_errors
      - code_with_annotation_issues

validation:
  success_indicators:
    - "No compilation errors"
    - "All imports resolved"
    - "Proper syntax structure"
    - "Spring annotations correct"
  
  quality_checks:
    - "Business logic unchanged"
    - "Clean, readable code"
    - "Proper error handling preserved"
    - "Spring Boot 3 compliance"

examples:
  input:
    error_type: "SYNTAX_ERROR"
    error_message: "illegal character: '`'"
    error_file: "UserController.java"
    error_line: "1"
    error_details: ["illegal character: '`' at line 1", "class, interface, enum expected at line 2"]
    problematic_code: |
      ```java
      package com.example.controller;
      // This is a generated Spring Controller
      @Controller
      public class UserController {
          // methods here
      }
      ```
    original_struts_code: |
      public class UserAction extends Action {
          public ActionForward execute(...) {
              // user logic
          }
      }

  expected_output: |
    package com.example.controller;

    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;

    @Controller
    public class UserController {
        
        @RequestMapping("/user")
        public String handleUser() {
            // user logic
            return "user-view";
        }
    }
